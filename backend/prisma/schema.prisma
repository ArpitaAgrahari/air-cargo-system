generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum BookingStatus {
  BOOKED
  DEPARTED
  ARRIVED
  DELIVERED
  CANCELLED
}

enum UserRole {
  CUSTOMER
  STAFF
  ADMIN
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  role          String?
  sessions      Session[]
  accounts      Account[]
  bookings      Booking[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Flight {
  id                      Int      @id @default(autoincrement())
  flightNumber           String   @map("flight_number")
  airlineName            String   @map("airline_name")
  awbPrefix              String   @map("awb_prefix")
  originAirportCode      String   @map("origin_airport_code")
  destinationAirportCode String   @map("destination_airport_code")
  departureDatetime      DateTime @map("departure_datetime")
  arrivalDatetime        DateTime @map("arrival_datetime")
  maxCapacityWeightKg    Int?     @map("max_capacity_weight_kg")
  maxCapacityPieces      Int?     @map("max_capacity_pieces")
  overbookingPercentage  Int?     @map("overbooking_percentage")
  createdAt              DateTime @default(now()) @map("created_at")
  updatedAt              DateTime @updatedAt @map("updated_at")
  bookings               Booking[]

  @@map("flight")
}

model Booking {
  id                      Int             @id @default(autoincrement())
  awbNo                   String          @map("awb_no")
  originAirportCode      String          @map("origin_airport_code")
  destinationAirportCode String          @map("destination_airport_code")
  pieces                 Int
  weightKg               Int             @map("weight_kg")
  status                 BookingStatus
  createdAt              DateTime        @default(now()) @map("created_at")
  updatedAt              DateTime        @updatedAt @map("updated_at")
  customerId             String          @map("customer_id")
  flightId               Int?            @map("flight_id")
  customer               User            @relation(fields: [customerId], references: [id], onDelete: Cascade)
  flight                 Flight?         @relation(fields: [flightId], references: [id])
  events                 BookingEvent[]

  @@map("booking")
}

model BookingEvent {
  id        String        @id @default(cuid())
  bookingId Int           @map("booking_id")
  eventType BookingStatus @map("event_type")
  location  String
  timestamp DateTime
  details   Json?
  booking   Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("booking_event")
}
